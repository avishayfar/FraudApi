/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// OrderLineData
    /// </summary>
    [DataContract]
    public partial class OrderLineData :  IEquatable<OrderLineData>, IValidatableObject
    {
        /// <summary>
        /// Indicates the fulfillment result of line item
        /// </summary>
        /// <value>Indicates the fulfillment result of line item</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FulfillmentResultEnum
        {
            
            /// <summary>
            /// Enum Replaced for value: Replaced
            /// </summary>
            [EnumMember(Value = "Replaced")]
            Replaced = 1,
            
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 2,
            
            /// <summary>
            /// Enum Fulfilled for value: Fulfilled
            /// </summary>
            [EnumMember(Value = "Fulfilled")]
            Fulfilled = 3
        }

        /// <summary>
        /// Indicates the fulfillment result of line item
        /// </summary>
        /// <value>Indicates the fulfillment result of line item</value>
        [DataMember(Name="fulfillmentResult", EmitDefaultValue=false)]
        public FulfillmentResultEnum? FulfillmentResult { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineData" /> class.
        /// </summary>
        /// <param name="Comments">General comments for each line item of an order.  Comments has been deprecated, in favor of using the typed notes feature..</param>
        /// <param name="Description">The line&#39;s description.</param>
        /// <param name="ExtendedAmount">The Line extended amount. That is: Quantity X Unit price.</param>
        /// <param name="ItemType">The order line item type. e.g. Fee, Tare, Fuel....</param>
        /// <param name="Notes">The notes applying to this line item, such as cooking instructions, or customer substitutions preferred.</param>
        /// <param name="ParentLineId">The line identifier for the parent item. Parents are used to set up linkage between items, and to build a hierarchy of items..</param>
        /// <param name="PriceModifiers">The price modifiers for this line only.</param>
        /// <param name="ProductId">The identifier of the product used to create the order line.</param>
        /// <param name="Quantity">The line quantity.</param>
        /// <param name="SubstitutionAllowed">Substitution Allowed for an item.</param>
        /// <param name="Taxes">The taxes for this line only.</param>
        /// <param name="UnitPrice">The price per unit.</param>
        /// <param name="ScanData">Applicable for POS where picker writes composite barcode instead of overwriting product ID field. Maximum allowable length is 2710 characters..</param>
        /// <param name="SupplementalData">Use for capturing gift payment (track data), product serial number, IMEI. Maximum allowable length is 2710 characters..</param>
        /// <param name="ModifierCode">The modifier code associated with the item, typically as defined in the POS system, to indicate e.g. &#39;well done&#39;, &#39;extra ketchup&#39;.</param>
        /// <param name="LinkGroupCode">Hospitality linkGroupCode, such as codes for &#39;toppings&#39;, &#39;sides&#39;, or Retail &#39;substitution&#39;.</param>
        /// <param name="LineReplaced">LineReplaced.</param>
        /// <param name="FulfillmentResult">Indicates the fulfillment result of line item.</param>
        /// <param name="GroupMemberId">ID of the group member to which this order line item belongs.</param>
        /// <param name="OverridePrice">Set to true to indicate that the item&#39;s current price should override any other local prices.</param>
        /// <param name="LineId">LineId.</param>
        public OrderLineData(string Comments = default(string), string Description = default(string), decimal? ExtendedAmount = default(decimal?), string ItemType = default(string), List<OrderLineNoteData> Notes = default(List<OrderLineNoteData>), string ParentLineId = default(string), List<LinePriceModifierData> PriceModifiers = default(List<LinePriceModifierData>), ProductIdData ProductId = default(ProductIdData), QuantityData Quantity = default(QuantityData), bool? SubstitutionAllowed = default(bool?), List<LineTaxData> Taxes = default(List<LineTaxData>), decimal? UnitPrice = default(decimal?), string ScanData = default(string), string SupplementalData = default(string), string ModifierCode = default(string), string LinkGroupCode = default(string), string LineReplaced = default(string), FulfillmentResultEnum? FulfillmentResult = default(FulfillmentResultEnum?), string GroupMemberId = default(string), bool? OverridePrice = default(bool?), string LineId = default(string))
        {
            this.Comments = Comments;
            this.Description = Description;
            this.ExtendedAmount = ExtendedAmount;
            this.ItemType = ItemType;
            this.Notes = Notes;
            this.ParentLineId = ParentLineId;
            this.PriceModifiers = PriceModifiers;
            this.ProductId = ProductId;
            this.Quantity = Quantity;
            this.SubstitutionAllowed = SubstitutionAllowed;
            this.Taxes = Taxes;
            this.UnitPrice = UnitPrice;
            this.ScanData = ScanData;
            this.SupplementalData = SupplementalData;
            this.ModifierCode = ModifierCode;
            this.LinkGroupCode = LinkGroupCode;
            this.LineReplaced = LineReplaced;
            this.FulfillmentResult = FulfillmentResult;
            this.GroupMemberId = GroupMemberId;
            this.OverridePrice = OverridePrice;
            this.LineId = LineId;
        }
        
        /// <summary>
        /// General comments for each line item of an order.  Comments has been deprecated, in favor of using the typed notes feature.
        /// </summary>
        /// <value>General comments for each line item of an order.  Comments has been deprecated, in favor of using the typed notes feature.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The line&#39;s description
        /// </summary>
        /// <value>The line&#39;s description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The Line extended amount. That is: Quantity X Unit price
        /// </summary>
        /// <value>The Line extended amount. That is: Quantity X Unit price</value>
        [DataMember(Name="extendedAmount", EmitDefaultValue=false)]
        public decimal? ExtendedAmount { get; set; }

        /// <summary>
        /// The order line item type. e.g. Fee, Tare, Fuel...
        /// </summary>
        /// <value>The order line item type. e.g. Fee, Tare, Fuel...</value>
        [DataMember(Name="itemType", EmitDefaultValue=false)]
        public string ItemType { get; set; }

        /// <summary>
        /// The notes applying to this line item, such as cooking instructions, or customer substitutions preferred
        /// </summary>
        /// <value>The notes applying to this line item, such as cooking instructions, or customer substitutions preferred</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public List<OrderLineNoteData> Notes { get; set; }

        /// <summary>
        /// The line identifier for the parent item. Parents are used to set up linkage between items, and to build a hierarchy of items.
        /// </summary>
        /// <value>The line identifier for the parent item. Parents are used to set up linkage between items, and to build a hierarchy of items.</value>
        [DataMember(Name="parentLineId", EmitDefaultValue=false)]
        public string ParentLineId { get; set; }

        /// <summary>
        /// The price modifiers for this line only
        /// </summary>
        /// <value>The price modifiers for this line only</value>
        [DataMember(Name="priceModifiers", EmitDefaultValue=false)]
        public List<LinePriceModifierData> PriceModifiers { get; set; }

        /// <summary>
        /// The identifier of the product used to create the order line
        /// </summary>
        /// <value>The identifier of the product used to create the order line</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public ProductIdData ProductId { get; set; }

        /// <summary>
        /// The line quantity
        /// </summary>
        /// <value>The line quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public QuantityData Quantity { get; set; }

        /// <summary>
        /// Substitution Allowed for an item
        /// </summary>
        /// <value>Substitution Allowed for an item</value>
        [DataMember(Name="substitutionAllowed", EmitDefaultValue=false)]
        public bool? SubstitutionAllowed { get; set; }

        /// <summary>
        /// The taxes for this line only
        /// </summary>
        /// <value>The taxes for this line only</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<LineTaxData> Taxes { get; set; }

        /// <summary>
        /// The price per unit
        /// </summary>
        /// <value>The price per unit</value>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public decimal? UnitPrice { get; set; }

        /// <summary>
        /// Applicable for POS where picker writes composite barcode instead of overwriting product ID field. Maximum allowable length is 2710 characters.
        /// </summary>
        /// <value>Applicable for POS where picker writes composite barcode instead of overwriting product ID field. Maximum allowable length is 2710 characters.</value>
        [DataMember(Name="scanData", EmitDefaultValue=false)]
        public string ScanData { get; set; }

        /// <summary>
        /// Use for capturing gift payment (track data), product serial number, IMEI. Maximum allowable length is 2710 characters.
        /// </summary>
        /// <value>Use for capturing gift payment (track data), product serial number, IMEI. Maximum allowable length is 2710 characters.</value>
        [DataMember(Name="supplementalData", EmitDefaultValue=false)]
        public string SupplementalData { get; set; }

        /// <summary>
        /// The modifier code associated with the item, typically as defined in the POS system, to indicate e.g. &#39;well done&#39;, &#39;extra ketchup&#39;
        /// </summary>
        /// <value>The modifier code associated with the item, typically as defined in the POS system, to indicate e.g. &#39;well done&#39;, &#39;extra ketchup&#39;</value>
        [DataMember(Name="modifierCode", EmitDefaultValue=false)]
        public string ModifierCode { get; set; }

        /// <summary>
        /// Hospitality linkGroupCode, such as codes for &#39;toppings&#39;, &#39;sides&#39;, or Retail &#39;substitution&#39;
        /// </summary>
        /// <value>Hospitality linkGroupCode, such as codes for &#39;toppings&#39;, &#39;sides&#39;, or Retail &#39;substitution&#39;</value>
        [DataMember(Name="linkGroupCode", EmitDefaultValue=false)]
        public string LinkGroupCode { get; set; }

        /// <summary>
        /// Gets or Sets LineReplaced
        /// </summary>
        [DataMember(Name="lineReplaced", EmitDefaultValue=false)]
        public string LineReplaced { get; set; }


        /// <summary>
        /// ID of the group member to which this order line item belongs
        /// </summary>
        /// <value>ID of the group member to which this order line item belongs</value>
        [DataMember(Name="groupMemberId", EmitDefaultValue=false)]
        public string GroupMemberId { get; set; }

        /// <summary>
        /// Set to true to indicate that the item&#39;s current price should override any other local prices
        /// </summary>
        /// <value>Set to true to indicate that the item&#39;s current price should override any other local prices</value>
        [DataMember(Name="overridePrice", EmitDefaultValue=false)]
        public bool? OverridePrice { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineData {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExtendedAmount: ").Append(ExtendedAmount).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ParentLineId: ").Append(ParentLineId).Append("\n");
            sb.Append("  PriceModifiers: ").Append(PriceModifiers).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SubstitutionAllowed: ").Append(SubstitutionAllowed).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  ScanData: ").Append(ScanData).Append("\n");
            sb.Append("  SupplementalData: ").Append(SupplementalData).Append("\n");
            sb.Append("  ModifierCode: ").Append(ModifierCode).Append("\n");
            sb.Append("  LinkGroupCode: ").Append(LinkGroupCode).Append("\n");
            sb.Append("  LineReplaced: ").Append(LineReplaced).Append("\n");
            sb.Append("  FulfillmentResult: ").Append(FulfillmentResult).Append("\n");
            sb.Append("  GroupMemberId: ").Append(GroupMemberId).Append("\n");
            sb.Append("  OverridePrice: ").Append(OverridePrice).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLineData);
        }

        /// <summary>
        /// Returns true if OrderLineData instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ExtendedAmount == input.ExtendedAmount ||
                    (this.ExtendedAmount != null &&
                    this.ExtendedAmount.Equals(input.ExtendedAmount))
                ) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && 
                (
                    this.Notes == input.Notes ||
                    this.Notes != null &&
                    this.Notes.SequenceEqual(input.Notes)
                ) && 
                (
                    this.ParentLineId == input.ParentLineId ||
                    (this.ParentLineId != null &&
                    this.ParentLineId.Equals(input.ParentLineId))
                ) && 
                (
                    this.PriceModifiers == input.PriceModifiers ||
                    this.PriceModifiers != null &&
                    this.PriceModifiers.SequenceEqual(input.PriceModifiers)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.SubstitutionAllowed == input.SubstitutionAllowed ||
                    (this.SubstitutionAllowed != null &&
                    this.SubstitutionAllowed.Equals(input.SubstitutionAllowed))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.ScanData == input.ScanData ||
                    (this.ScanData != null &&
                    this.ScanData.Equals(input.ScanData))
                ) && 
                (
                    this.SupplementalData == input.SupplementalData ||
                    (this.SupplementalData != null &&
                    this.SupplementalData.Equals(input.SupplementalData))
                ) && 
                (
                    this.ModifierCode == input.ModifierCode ||
                    (this.ModifierCode != null &&
                    this.ModifierCode.Equals(input.ModifierCode))
                ) && 
                (
                    this.LinkGroupCode == input.LinkGroupCode ||
                    (this.LinkGroupCode != null &&
                    this.LinkGroupCode.Equals(input.LinkGroupCode))
                ) && 
                (
                    this.LineReplaced == input.LineReplaced ||
                    (this.LineReplaced != null &&
                    this.LineReplaced.Equals(input.LineReplaced))
                ) && 
                (
                    this.FulfillmentResult == input.FulfillmentResult ||
                    (this.FulfillmentResult != null &&
                    this.FulfillmentResult.Equals(input.FulfillmentResult))
                ) && 
                (
                    this.GroupMemberId == input.GroupMemberId ||
                    (this.GroupMemberId != null &&
                    this.GroupMemberId.Equals(input.GroupMemberId))
                ) && 
                (
                    this.OverridePrice == input.OverridePrice ||
                    (this.OverridePrice != null &&
                    this.OverridePrice.Equals(input.OverridePrice))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExtendedAmount != null)
                    hashCode = hashCode * 59 + this.ExtendedAmount.GetHashCode();
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.ParentLineId != null)
                    hashCode = hashCode * 59 + this.ParentLineId.GetHashCode();
                if (this.PriceModifiers != null)
                    hashCode = hashCode * 59 + this.PriceModifiers.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SubstitutionAllowed != null)
                    hashCode = hashCode * 59 + this.SubstitutionAllowed.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.ScanData != null)
                    hashCode = hashCode * 59 + this.ScanData.GetHashCode();
                if (this.SupplementalData != null)
                    hashCode = hashCode * 59 + this.SupplementalData.GetHashCode();
                if (this.ModifierCode != null)
                    hashCode = hashCode * 59 + this.ModifierCode.GetHashCode();
                if (this.LinkGroupCode != null)
                    hashCode = hashCode * 59 + this.LinkGroupCode.GetHashCode();
                if (this.LineReplaced != null)
                    hashCode = hashCode * 59 + this.LineReplaced.GetHashCode();
                if (this.FulfillmentResult != null)
                    hashCode = hashCode * 59 + this.FulfillmentResult.GetHashCode();
                if (this.GroupMemberId != null)
                    hashCode = hashCode * 59 + this.GroupMemberId.GetHashCode();
                if (this.OverridePrice != null)
                    hashCode = hashCode * 59 + this.OverridePrice.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Comments (string) maxLength
            if(this.Comments != null && this.Comments.Length > 4000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be less than 4000.", new [] { "Comments" });
            }

            // Comments (string) minLength
            if(this.Comments != null && this.Comments.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Comments, length must be greater than 0.", new [] { "Comments" });
            }

            // ScanData (string) maxLength
            if(this.ScanData != null && this.ScanData.Length > 2710)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScanData, length must be less than 2710.", new [] { "ScanData" });
            }

            // ScanData (string) minLength
            if(this.ScanData != null && this.ScanData.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScanData, length must be greater than 0.", new [] { "ScanData" });
            }

            // SupplementalData (string) maxLength
            if(this.SupplementalData != null && this.SupplementalData.Length > 2710)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplementalData, length must be less than 2710.", new [] { "SupplementalData" });
            }

            // SupplementalData (string) minLength
            if(this.SupplementalData != null && this.SupplementalData.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplementalData, length must be greater than 0.", new [] { "SupplementalData" });
            }

            yield break;
        }
    }

}
