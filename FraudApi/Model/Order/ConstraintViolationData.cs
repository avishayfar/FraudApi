/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// Captures constraint violation information for an API request
    /// </summary>
    [DataContract]
    public partial class ConstraintViolationData :  IEquatable<ConstraintViolationData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstraintViolationData" /> class.
        /// </summary>
        /// <param name="InvalidValue">The value that failed validation.</param>
        /// <param name="Message">Message describing the violation error.</param>
        /// <param name="PropertyPath">The path of the property that failed validation.</param>
        public ConstraintViolationData(string InvalidValue = default(string), string Message = default(string), string PropertyPath = default(string))
        {
            this.InvalidValue = InvalidValue;
            this.Message = Message;
            this.PropertyPath = PropertyPath;
        }
        
        /// <summary>
        /// The value that failed validation
        /// </summary>
        /// <value>The value that failed validation</value>
        [DataMember(Name="invalidValue", EmitDefaultValue=false)]
        public string InvalidValue { get; set; }

        /// <summary>
        /// Message describing the violation error
        /// </summary>
        /// <value>Message describing the violation error</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The path of the property that failed validation
        /// </summary>
        /// <value>The path of the property that failed validation</value>
        [DataMember(Name="propertyPath", EmitDefaultValue=false)]
        public string PropertyPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConstraintViolationData {\n");
            sb.Append("  InvalidValue: ").Append(InvalidValue).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  PropertyPath: ").Append(PropertyPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstraintViolationData);
        }

        /// <summary>
        /// Returns true if ConstraintViolationData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstraintViolationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstraintViolationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvalidValue == input.InvalidValue ||
                    (this.InvalidValue != null &&
                    this.InvalidValue.Equals(input.InvalidValue))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.PropertyPath == input.PropertyPath ||
                    (this.PropertyPath != null &&
                    this.PropertyPath.Equals(input.PropertyPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvalidValue != null)
                    hashCode = hashCode * 59 + this.InvalidValue.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.PropertyPath != null)
                    hashCode = hashCode * 59 + this.PropertyPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
