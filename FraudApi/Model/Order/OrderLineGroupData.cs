/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// OrderLineGroupData
    /// </summary>
    [DataContract]
    public partial class OrderLineGroupData :  IEquatable<OrderLineGroupData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderLineGroupData" /> class.
        /// </summary>
        /// <param name="Name">OrderLineGroup name.</param>
        /// <param name="OrderLineIds">List of Order Line Item IDs. Items must exist on the order.</param>
        /// <param name="LineId">LineId.</param>
        public OrderLineGroupData(string Name = default(string), List<string> OrderLineIds = default(List<string>), string LineId = default(string))
        {
            this.Name = Name;
            this.OrderLineIds = OrderLineIds;
            this.LineId = LineId;
        }
        
        /// <summary>
        /// OrderLineGroup name
        /// </summary>
        /// <value>OrderLineGroup name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of Order Line Item IDs. Items must exist on the order
        /// </summary>
        /// <value>List of Order Line Item IDs. Items must exist on the order</value>
        [DataMember(Name="orderLineIds", EmitDefaultValue=false)]
        public List<string> OrderLineIds { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderLineGroupData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderLineIds: ").Append(OrderLineIds).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderLineGroupData);
        }

        /// <summary>
        /// Returns true if OrderLineGroupData instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderLineGroupData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderLineGroupData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderLineIds == input.OrderLineIds ||
                    this.OrderLineIds != null &&
                    this.OrderLineIds.SequenceEqual(input.OrderLineIds)
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrderLineIds != null)
                    hashCode = hashCode * 59 + this.OrderLineIds.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
