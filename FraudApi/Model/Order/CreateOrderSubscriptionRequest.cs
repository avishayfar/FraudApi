/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// The unique ID for a subscription
    /// </summary>
    [DataContract]
    public partial class CreateOrderSubscriptionRequest :  IEquatable<CreateOrderSubscriptionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderSubscriptionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrderSubscriptionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrderSubscriptionRequest" /> class.
        /// </summary>
        /// <param name="Name">The name of the subscription (required).</param>
        /// <param name="PayloadDelivered">Indicates if payload should be delivered.</param>
        /// <param name="Description">Description of the subscription (required).</param>
        /// <param name="Endpoint">Data to define the endpoint to which published messages should be sent for subscription (required).</param>
        /// <param name="AuthenticationCredentials">Authentication credentials needed for endpoint.</param>
        public CreateOrderSubscriptionRequest(string Name = default(string), bool? PayloadDelivered = default(bool?), string Description = default(string), UrlEndpointData Endpoint = default(UrlEndpointData), AuthenticationData AuthenticationCredentials = default(AuthenticationData))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateOrderSubscriptionRequest and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for CreateOrderSubscriptionRequest and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Endpoint" is required (not null)
            if (Endpoint == null)
            {
                throw new InvalidDataException("Endpoint is a required property for CreateOrderSubscriptionRequest and cannot be null");
            }
            else
            {
                this.Endpoint = Endpoint;
            }
            this.PayloadDelivered = PayloadDelivered;
            this.AuthenticationCredentials = AuthenticationCredentials;
        }
        
        /// <summary>
        /// The name of the subscription
        /// </summary>
        /// <value>The name of the subscription</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if payload should be delivered
        /// </summary>
        /// <value>Indicates if payload should be delivered</value>
        [DataMember(Name="payloadDelivered", EmitDefaultValue=false)]
        public bool? PayloadDelivered { get; set; }

        /// <summary>
        /// Description of the subscription
        /// </summary>
        /// <value>Description of the subscription</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Data to define the endpoint to which published messages should be sent for subscription
        /// </summary>
        /// <value>Data to define the endpoint to which published messages should be sent for subscription</value>
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public UrlEndpointData Endpoint { get; set; }

        /// <summary>
        /// Authentication credentials needed for endpoint
        /// </summary>
        /// <value>Authentication credentials needed for endpoint</value>
        [DataMember(Name="authenticationCredentials", EmitDefaultValue=false)]
        public AuthenticationData AuthenticationCredentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrderSubscriptionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PayloadDelivered: ").Append(PayloadDelivered).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  AuthenticationCredentials: ").Append(AuthenticationCredentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrderSubscriptionRequest);
        }

        /// <summary>
        /// Returns true if CreateOrderSubscriptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrderSubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrderSubscriptionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PayloadDelivered == input.PayloadDelivered ||
                    (this.PayloadDelivered != null &&
                    this.PayloadDelivered.Equals(input.PayloadDelivered))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.AuthenticationCredentials == input.AuthenticationCredentials ||
                    (this.AuthenticationCredentials != null &&
                    this.AuthenticationCredentials.Equals(input.AuthenticationCredentials))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PayloadDelivered != null)
                    hashCode = hashCode * 59 + this.PayloadDelivered.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                if (this.AuthenticationCredentials != null)
                    hashCode = hashCode * 59 + this.AuthenticationCredentials.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"\\p{Alpha}[\\w-]*", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            yield break;
        }
    }

}
