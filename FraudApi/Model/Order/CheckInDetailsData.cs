/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// CheckInDetailsData
    /// </summary>
    [DataContract]
    public partial class CheckInDetailsData :  IEquatable<CheckInDetailsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckInDetailsData" /> class.
        /// </summary>
        /// <param name="Location">CheckIn location from where order can be picked up.</param>
        /// <param name="Application">Name of the application used to initiate the check in event.</param>
        /// <param name="Origin">Checkin origin.</param>
        /// <param name="Vector">Checkin vector.</param>
        public CheckInDetailsData(string Location = default(string), string Application = default(string), CheckInOriginData Origin = default(CheckInOriginData), CheckInVectorData Vector = default(CheckInVectorData))
        {
            this.Location = Location;
            this.Application = Application;
            this.Origin = Origin;
            this.Vector = Vector;
        }
        
        /// <summary>
        /// CheckIn location from where order can be picked up
        /// </summary>
        /// <value>CheckIn location from where order can be picked up</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Name of the application used to initiate the check in event
        /// </summary>
        /// <value>Name of the application used to initiate the check in event</value>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public string Application { get; set; }

        /// <summary>
        /// Checkin origin
        /// </summary>
        /// <value>Checkin origin</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public CheckInOriginData Origin { get; set; }

        /// <summary>
        /// Checkin vector
        /// </summary>
        /// <value>Checkin vector</value>
        [DataMember(Name="vector", EmitDefaultValue=false)]
        public CheckInVectorData Vector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckInDetailsData {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Vector: ").Append(Vector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckInDetailsData);
        }

        /// <summary>
        /// Returns true if CheckInDetailsData instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckInDetailsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckInDetailsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Vector == input.Vector ||
                    (this.Vector != null &&
                    this.Vector.Equals(input.Vector))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.Vector != null)
                    hashCode = hashCode * 59 + this.Vector.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
