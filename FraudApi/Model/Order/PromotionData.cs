/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// PromotionData
    /// </summary>
    [DataContract]
    public partial class PromotionData :  IEquatable<PromotionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionData" /> class.
        /// </summary>
        /// <param name="ReferenceId">Customer identifier for a specific promotion.</param>
        /// <param name="SupportingData">Additional information required by some promotion types.</param>
        /// <param name="Amount">Total amount discounted by the promotion.</param>
        /// <param name="NumGuests">The number of guests for which this promotion is applicable.</param>
        /// <param name="OrderLineGroups">Line item(s) to which the promotion is applied.</param>
        /// <param name="Adjustment">Identify the adjustment.</param>
        /// <param name="LineId">LineId.</param>
        public PromotionData(string ReferenceId = default(string), string SupportingData = default(string), decimal? Amount = default(decimal?), int? NumGuests = default(int?), List<OrderLineGroupData> OrderLineGroups = default(List<OrderLineGroupData>), AdjustmentData Adjustment = default(AdjustmentData), string LineId = default(string))
        {
            this.ReferenceId = ReferenceId;
            this.SupportingData = SupportingData;
            this.Amount = Amount;
            this.NumGuests = NumGuests;
            this.OrderLineGroups = OrderLineGroups;
            this.Adjustment = Adjustment;
            this.LineId = LineId;
        }
        
        /// <summary>
        /// Customer identifier for a specific promotion
        /// </summary>
        /// <value>Customer identifier for a specific promotion</value>
        [DataMember(Name="referenceId", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Additional information required by some promotion types
        /// </summary>
        /// <value>Additional information required by some promotion types</value>
        [DataMember(Name="supportingData", EmitDefaultValue=false)]
        public string SupportingData { get; set; }

        /// <summary>
        /// Total amount discounted by the promotion
        /// </summary>
        /// <value>Total amount discounted by the promotion</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The number of guests for which this promotion is applicable
        /// </summary>
        /// <value>The number of guests for which this promotion is applicable</value>
        [DataMember(Name="numGuests", EmitDefaultValue=false)]
        public int? NumGuests { get; set; }

        /// <summary>
        /// Line item(s) to which the promotion is applied
        /// </summary>
        /// <value>Line item(s) to which the promotion is applied</value>
        [DataMember(Name="orderLineGroups", EmitDefaultValue=false)]
        public List<OrderLineGroupData> OrderLineGroups { get; set; }

        /// <summary>
        /// Identify the adjustment
        /// </summary>
        /// <value>Identify the adjustment</value>
        [DataMember(Name="adjustment", EmitDefaultValue=false)]
        public AdjustmentData Adjustment { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PromotionData {\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  SupportingData: ").Append(SupportingData).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  NumGuests: ").Append(NumGuests).Append("\n");
            sb.Append("  OrderLineGroups: ").Append(OrderLineGroups).Append("\n");
            sb.Append("  Adjustment: ").Append(Adjustment).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PromotionData);
        }

        /// <summary>
        /// Returns true if PromotionData instances are equal
        /// </summary>
        /// <param name="input">Instance of PromotionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PromotionData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.SupportingData == input.SupportingData ||
                    (this.SupportingData != null &&
                    this.SupportingData.Equals(input.SupportingData))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.NumGuests == input.NumGuests ||
                    (this.NumGuests != null &&
                    this.NumGuests.Equals(input.NumGuests))
                ) && 
                (
                    this.OrderLineGroups == input.OrderLineGroups ||
                    this.OrderLineGroups != null &&
                    this.OrderLineGroups.SequenceEqual(input.OrderLineGroups)
                ) && 
                (
                    this.Adjustment == input.Adjustment ||
                    (this.Adjustment != null &&
                    this.Adjustment.Equals(input.Adjustment))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceId != null)
                    hashCode = hashCode * 59 + this.ReferenceId.GetHashCode();
                if (this.SupportingData != null)
                    hashCode = hashCode * 59 + this.SupportingData.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.NumGuests != null)
                    hashCode = hashCode * 59 + this.NumGuests.GetHashCode();
                if (this.OrderLineGroups != null)
                    hashCode = hashCode * 59 + this.OrderLineGroups.GetHashCode();
                if (this.Adjustment != null)
                    hashCode = hashCode * 59 + this.Adjustment.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumGuests (int?) minimum
            if(this.NumGuests < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumGuests, must be a value greater than or equal to 0.", new [] { "NumGuests" });
            }

            yield break;
        }
    }

}
