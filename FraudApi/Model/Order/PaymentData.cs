/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace FraudAPI.Model.Order
{
    /// <summary>
    /// PaymentData
    /// </summary>
    [DataContract]
    public partial class PaymentData :  IEquatable<PaymentData>, IValidatableObject
    {
        /// <summary>
        /// The payments&#39; type.
        /// </summary>
        /// <value>The payments&#39; type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum AccountsReceivable for value: AccountsReceivable
            /// </summary>
            [EnumMember(Value = "AccountsReceivable")]
            AccountsReceivable = 1,
            
            /// <summary>
            /// Enum AirmilesConversion for value: AirmilesConversion
            /// </summary>
            [EnumMember(Value = "AirmilesConversion")]
            AirmilesConversion = 2,
            
            /// <summary>
            /// Enum CapitalBond for value: CapitalBond
            /// </summary>
            [EnumMember(Value = "CapitalBond")]
            CapitalBond = 3,
            
            /// <summary>
            /// Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")]
            Cash = 4,
            
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 5,
            
            /// <summary>
            /// Enum CheckCard for value: CheckCard
            /// </summary>
            [EnumMember(Value = "CheckCard")]
            CheckCard = 6,
            
            /// <summary>
            /// Enum CoPay for value: CoPay
            /// </summary>
            [EnumMember(Value = "CoPay")]
            CoPay = 7,
            
            /// <summary>
            /// Enum Coupon for value: Coupon
            /// </summary>
            [EnumMember(Value = "Coupon")]
            Coupon = 8,
            
            /// <summary>
            /// Enum CustomerAccount for value: CustomerAccount
            /// </summary>
            [EnumMember(Value = "CustomerAccount")]
            CustomerAccount = 9,
            
            /// <summary>
            /// Enum ElectronicTollCollection for value: ElectronicTollCollection
            /// </summary>
            [EnumMember(Value = "ElectronicTollCollection")]
            ElectronicTollCollection = 10,
            
            /// <summary>
            /// Enum FoodStamps for value: FoodStamps
            /// </summary>
            [EnumMember(Value = "FoodStamps")]
            FoodStamps = 11,
            
            /// <summary>
            /// Enum GiftCertificate for value: GiftCertificate
            /// </summary>
            [EnumMember(Value = "GiftCertificate")]
            GiftCertificate = 12,
            
            /// <summary>
            /// Enum HouseAccount for value: HouseAccount
            /// </summary>
            [EnumMember(Value = "HouseAccount")]
            HouseAccount = 13,
            
            /// <summary>
            /// Enum InternationalMaestro for value: InternationalMaestro
            /// </summary>
            [EnumMember(Value = "InternationalMaestro")]
            InternationalMaestro = 14,
            
            /// <summary>
            /// Enum Loyalty for value: Loyalty
            /// </summary>
            [EnumMember(Value = "Loyalty")]
            Loyalty = 15,
            
            /// <summary>
            /// Enum ManufacturerCoupon for value: ManufacturerCoupon
            /// </summary>
            [EnumMember(Value = "ManufacturerCoupon")]
            ManufacturerCoupon = 16,
            
            /// <summary>
            /// Enum PurchaseOrder for value: PurchaseOrder
            /// </summary>
            [EnumMember(Value = "PurchaseOrder")]
            PurchaseOrder = 17,
            
            /// <summary>
            /// Enum StaffDressAllowance for value: StaffDressAllowance
            /// </summary>
            [EnumMember(Value = "StaffDressAllowance")]
            StaffDressAllowance = 18,
            
            /// <summary>
            /// Enum StoredValue for value: StoredValue
            /// </summary>
            [EnumMember(Value = "StoredValue")]
            StoredValue = 19,
            
            /// <summary>
            /// Enum TravelersCheck for value: TravelersCheck
            /// </summary>
            [EnumMember(Value = "TravelersCheck")]
            TravelersCheck = 20,
            
            /// <summary>
            /// Enum UKMaestro for value: UKMaestro
            /// </summary>
            [EnumMember(Value = "UKMaestro")]
            UKMaestro = 21,
            
            /// <summary>
            /// Enum Voucher for value: Voucher
            /// </summary>
            [EnumMember(Value = "Voucher")]
            Voucher = 22,
            
            /// <summary>
            /// Enum WICCheck for value: WICCheck
            /// </summary>
            [EnumMember(Value = "WICCheck")]
            WICCheck = 23,
            
            /// <summary>
            /// Enum CreditDebit for value: CreditDebit
            /// </summary>
            [EnumMember(Value = "CreditDebit")]
            CreditDebit = 24,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 25
        }

        /// <summary>
        /// The payments&#39; type.
        /// </summary>
        /// <value>The payments&#39; type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentData" /> class.
        /// </summary>
        /// <param name="Amount">The amount paid.</param>
        /// <param name="Description">The payment description.</param>
        /// <param name="Gratuity">The amount tipped.</param>
        /// <param name="ReferenceId">External reference identifier, to relate the payment line to the payment system.</param>
        /// <param name="Status">The payment status. i.e. PreAuthorized, Authorized, Paid, PendingVerification.</param>
        /// <param name="Type">The payments&#39; type..</param>
        /// <param name="SubType">The payments&#39; subType. Here subType is required for CreditDebit card type. Return error if subType is not given for CreditDebit card type input..</param>
        /// <param name="MaskedPAN">Masked Personal Account number.</param>
        /// <param name="Token">Token for payment validation.</param>
        /// <param name="PayBalance">Indicates if remaining balance should be charged to the user.</param>
        /// <param name="AccountNumber">An account number like house account or a customer number..</param>
        /// <param name="Expiration">Date of expiration of the payment method like Credit card or Gift card or Debit Card.</param>
        /// <param name="LineId">LineId.</param>
        public PaymentData(decimal? Amount = default(decimal?), string Description = default(string), decimal? Gratuity = default(decimal?), string ReferenceId = default(string), string Status = default(string), TypeEnum? Type = default(TypeEnum?), string SubType = default(string), string MaskedPAN = default(string), string Token = default(string), bool? PayBalance = default(bool?), string AccountNumber = default(string), ExpirationData Expiration = default(ExpirationData), string LineId = default(string))
        {
            this.Amount = Amount;
            this.Description = Description;
            this.Gratuity = Gratuity;
            this.ReferenceId = ReferenceId;
            this.Status = Status;
            this.Type = Type;
            this.SubType = SubType;
            this.MaskedPAN = MaskedPAN;
            this.Token = Token;
            this.PayBalance = PayBalance;
            this.AccountNumber = AccountNumber;
            this.Expiration = Expiration;
            this.LineId = LineId;
        }
        
        /// <summary>
        /// The amount paid
        /// </summary>
        /// <value>The amount paid</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The payment description
        /// </summary>
        /// <value>The payment description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The amount tipped
        /// </summary>
        /// <value>The amount tipped</value>
        [DataMember(Name="gratuity", EmitDefaultValue=false)]
        public decimal? Gratuity { get; set; }

        /// <summary>
        /// External reference identifier, to relate the payment line to the payment system
        /// </summary>
        /// <value>External reference identifier, to relate the payment line to the payment system</value>
        [DataMember(Name="referenceId", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// The payment status. i.e. PreAuthorized, Authorized, Paid, PendingVerification
        /// </summary>
        /// <value>The payment status. i.e. PreAuthorized, Authorized, Paid, PendingVerification</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }


        /// <summary>
        /// The payments&#39; subType. Here subType is required for CreditDebit card type. Return error if subType is not given for CreditDebit card type input.
        /// </summary>
        /// <value>The payments&#39; subType. Here subType is required for CreditDebit card type. Return error if subType is not given for CreditDebit card type input.</value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// Masked Personal Account number
        /// </summary>
        /// <value>Masked Personal Account number</value>
        [DataMember(Name="maskedPAN", EmitDefaultValue=false)]
        public string MaskedPAN { get; set; }

        /// <summary>
        /// Token for payment validation
        /// </summary>
        /// <value>Token for payment validation</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Indicates if remaining balance should be charged to the user
        /// </summary>
        /// <value>Indicates if remaining balance should be charged to the user</value>
        [DataMember(Name="payBalance", EmitDefaultValue=false)]
        public bool? PayBalance { get; set; }

        /// <summary>
        /// An account number like house account or a customer number.
        /// </summary>
        /// <value>An account number like house account or a customer number.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Date of expiration of the payment method like Credit card or Gift card or Debit Card
        /// </summary>
        /// <value>Date of expiration of the payment method like Credit card or Gift card or Debit Card</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public ExpirationData Expiration { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentData {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Gratuity: ").Append(Gratuity).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  MaskedPAN: ").Append(MaskedPAN).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  PayBalance: ").Append(PayBalance).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentData);
        }

        /// <summary>
        /// Returns true if PaymentData instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Gratuity == input.Gratuity ||
                    (this.Gratuity != null &&
                    this.Gratuity.Equals(input.Gratuity))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.MaskedPAN == input.MaskedPAN ||
                    (this.MaskedPAN != null &&
                    this.MaskedPAN.Equals(input.MaskedPAN))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.PayBalance == input.PayBalance ||
                    (this.PayBalance != null &&
                    this.PayBalance.Equals(input.PayBalance))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Gratuity != null)
                    hashCode = hashCode * 59 + this.Gratuity.GetHashCode();
                if (this.ReferenceId != null)
                    hashCode = hashCode * 59 + this.ReferenceId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.MaskedPAN != null)
                    hashCode = hashCode * 59 + this.MaskedPAN.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.PayBalance != null)
                    hashCode = hashCode * 59 + this.PayBalance.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountNumber (string) maxLength
            if(this.AccountNumber != null && this.AccountNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be less than 20.", new [] { "AccountNumber" });
            }

            // AccountNumber (string) minLength
            if(this.AccountNumber != null && this.AccountNumber.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, length must be greater than 0.", new [] { "AccountNumber" });
            }

            yield break;
        }
    }

}
