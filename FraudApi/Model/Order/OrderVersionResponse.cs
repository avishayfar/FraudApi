/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// OrderVersionResponse
    /// </summary>
    [DataContract]
    public partial class OrderVersionResponse :  IEquatable<OrderVersionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderVersionResponse" /> class.
        /// </summary>
        /// <param name="Id">A generated unique identifier for the order version object.</param>
        /// <param name="DateUpdated">The datetime this order update occurred.</param>
        /// <param name="Diff">RFC 6902 JSON Patch Diff.</param>
        /// <param name="User">The user that made the order update.</param>
        /// <param name="DeviceId">The deviceId making the order update.</param>
        /// <param name="UpdatingOrganization">The organization responsible for this version.</param>
        public OrderVersionResponse(string Id = default(string), DateTime? DateUpdated = default(DateTime?), JsonNode Diff = default(JsonNode), string User = default(string), string DeviceId = default(string), string UpdatingOrganization = default(string))
        {
            this.Id = Id;
            this.DateUpdated = DateUpdated;
            this.Diff = Diff;
            this.User = User;
            this.DeviceId = DeviceId;
            this.UpdatingOrganization = UpdatingOrganization;
        }
        
        /// <summary>
        /// A generated unique identifier for the order version object
        /// </summary>
        /// <value>A generated unique identifier for the order version object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The datetime this order update occurred
        /// </summary>
        /// <value>The datetime this order update occurred</value>
        [DataMember(Name="dateUpdated", EmitDefaultValue=false)]
        public DateTime? DateUpdated { get; set; }

        /// <summary>
        /// RFC 6902 JSON Patch Diff
        /// </summary>
        /// <value>RFC 6902 JSON Patch Diff</value>
        [DataMember(Name="diff", EmitDefaultValue=false)]
        public JsonNode Diff { get; set; }

        /// <summary>
        /// The user that made the order update
        /// </summary>
        /// <value>The user that made the order update</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// The deviceId making the order update
        /// </summary>
        /// <value>The deviceId making the order update</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// The organization responsible for this version
        /// </summary>
        /// <value>The organization responsible for this version</value>
        [DataMember(Name="updatingOrganization", EmitDefaultValue=false)]
        public string UpdatingOrganization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderVersionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  Diff: ").Append(Diff).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  UpdatingOrganization: ").Append(UpdatingOrganization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderVersionResponse);
        }

        /// <summary>
        /// Returns true if OrderVersionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderVersionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderVersionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DateUpdated == input.DateUpdated ||
                    (this.DateUpdated != null &&
                    this.DateUpdated.Equals(input.DateUpdated))
                ) && 
                (
                    this.Diff == input.Diff ||
                    (this.Diff != null &&
                    this.Diff.Equals(input.Diff))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.UpdatingOrganization == input.UpdatingOrganization ||
                    (this.UpdatingOrganization != null &&
                    this.UpdatingOrganization.Equals(input.UpdatingOrganization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DateUpdated != null)
                    hashCode = hashCode * 59 + this.DateUpdated.GetHashCode();
                if (this.Diff != null)
                    hashCode = hashCode * 59 + this.Diff.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.UpdatingOrganization != null)
                    hashCode = hashCode * 59 + this.UpdatingOrganization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
