/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// LockData
    /// </summary>
    [DataContract]
    public partial class LockData :  IEquatable<LockData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LockData" /> class.
        /// </summary>
        /// <param name="LockedBy">The unique Id/Name of the touchpoint that locked the customer order.</param>
        /// <param name="LockedDate">The Date/Time when the locked happened, in ISO 8601 format.</param>
        public LockData(string LockedBy = default(string), DateTime? LockedDate = default(DateTime?))
        {
            this.LockedBy = LockedBy;
            this.LockedDate = LockedDate;
        }
        
        /// <summary>
        /// The unique Id/Name of the touchpoint that locked the customer order
        /// </summary>
        /// <value>The unique Id/Name of the touchpoint that locked the customer order</value>
        [DataMember(Name="lockedBy", EmitDefaultValue=false)]
        public string LockedBy { get; set; }

        /// <summary>
        /// The Date/Time when the locked happened, in ISO 8601 format
        /// </summary>
        /// <value>The Date/Time when the locked happened, in ISO 8601 format</value>
        [DataMember(Name="lockedDate", EmitDefaultValue=false)]
        public DateTime? LockedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LockData {\n");
            sb.Append("  LockedBy: ").Append(LockedBy).Append("\n");
            sb.Append("  LockedDate: ").Append(LockedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LockData);
        }

        /// <summary>
        /// Returns true if LockData instances are equal
        /// </summary>
        /// <param name="input">Instance of LockData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LockData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LockedBy == input.LockedBy ||
                    (this.LockedBy != null &&
                    this.LockedBy.Equals(input.LockedBy))
                ) && 
                (
                    this.LockedDate == input.LockedDate ||
                    (this.LockedDate != null &&
                    this.LockedDate.Equals(input.LockedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LockedBy != null)
                    hashCode = hashCode * 59 + this.LockedBy.GetHashCode();
                if (this.LockedDate != null)
                    hashCode = hashCode * 59 + this.LockedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
