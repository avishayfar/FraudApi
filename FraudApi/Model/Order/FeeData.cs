/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// FeeData
    /// </summary>
    [DataContract]
    public partial class FeeData :  IEquatable<FeeData>, IValidatableObject
    {
        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum CallIn for value: CallIn
            /// </summary>
            [EnumMember(Value = "CallIn")]
            CallIn = 2,
            
            /// <summary>
            /// Enum Catering for value: Catering
            /// </summary>
            [EnumMember(Value = "Catering")]
            Catering = 3,
            
            /// <summary>
            /// Enum WalkIn for value: WalkIn
            /// </summary>
            [EnumMember(Value = "WalkIn")]
            WalkIn = 4,
            
            /// <summary>
            /// Enum Delivery for value: Delivery
            /// </summary>
            [EnumMember(Value = "Delivery")]
            Delivery = 5,
            
            /// <summary>
            /// Enum EatIn for value: EatIn
            /// </summary>
            [EnumMember(Value = "EatIn")]
            EatIn = 6,
            
            /// <summary>
            /// Enum DriveThru for value: DriveThru
            /// </summary>
            [EnumMember(Value = "DriveThru")]
            DriveThru = 7,
            
            /// <summary>
            /// Enum Curbside for value: Curbside
            /// </summary>
            [EnumMember(Value = "Curbside")]
            Curbside = 8,
            
            /// <summary>
            /// Enum FaxedIn for value: FaxedIn
            /// </summary>
            [EnumMember(Value = "FaxedIn")]
            FaxedIn = 9,
            
            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            [EnumMember(Value = "Web")]
            Web = 10,
            
            /// <summary>
            /// Enum ModeCharge for value: ModeCharge
            /// </summary>
            [EnumMember(Value = "ModeCharge")]
            ModeCharge = 11,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 12
        }

        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeData" /> class.
        /// </summary>
        /// <param name="Type">The type of fee.</param>
        /// <param name="TypeLabel">If the &#39;Other&#39; type is used, then provide a label specifying the type.</param>
        /// <param name="Provider">The service provider charging the fee.</param>
        /// <param name="Amount">Amount of the fee.</param>
        /// <param name="_Override">Indicates this fee amount should be used instead of a calculated fee.</param>
        /// <param name="LineId">LineId.</param>
        public FeeData(TypeEnum? Type = default(TypeEnum?), string TypeLabel = default(string), string Provider = default(string), decimal? Amount = default(decimal?), bool? _Override = default(bool?), string LineId = default(string))
        {
            this.Type = Type;
            this.TypeLabel = TypeLabel;
            this.Provider = Provider;
            this.Amount = Amount;
            this._Override = _Override;
            this.LineId = LineId;
        }
        

        /// <summary>
        /// If the &#39;Other&#39; type is used, then provide a label specifying the type
        /// </summary>
        /// <value>If the &#39;Other&#39; type is used, then provide a label specifying the type</value>
        [DataMember(Name="typeLabel", EmitDefaultValue=false)]
        public string TypeLabel { get; set; }

        /// <summary>
        /// The service provider charging the fee
        /// </summary>
        /// <value>The service provider charging the fee</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Amount of the fee
        /// </summary>
        /// <value>Amount of the fee</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Indicates this fee amount should be used instead of a calculated fee
        /// </summary>
        /// <value>Indicates this fee amount should be used instead of a calculated fee</value>
        [DataMember(Name="override", EmitDefaultValue=false)]
        public bool? _Override { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeData {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeLabel: ").Append(TypeLabel).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  _Override: ").Append(_Override).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeData);
        }

        /// <summary>
        /// Returns true if FeeData instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeLabel == input.TypeLabel ||
                    (this.TypeLabel != null &&
                    this.TypeLabel.Equals(input.TypeLabel))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this._Override == input._Override ||
                    (this._Override != null &&
                    this._Override.Equals(input._Override))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeLabel != null)
                    hashCode = hashCode * 59 + this.TypeLabel.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this._Override != null)
                    hashCode = hashCode * 59 + this._Override.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
