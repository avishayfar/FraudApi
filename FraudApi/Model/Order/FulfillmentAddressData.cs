/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// FulfillmentAddressData
    /// </summary>
    [DataContract]
    public partial class FulfillmentAddressData :  IEquatable<FulfillmentAddressData>, IValidatableObject
    {
        /// <summary>
        /// The type of address.
        /// </summary>
        /// <value>The type of address.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Business for value: Business
            /// </summary>
            [EnumMember(Value = "Business")]
            Business = 1,
            
            /// <summary>
            /// Enum Residential for value: Residential
            /// </summary>
            [EnumMember(Value = "Residential")]
            Residential = 2,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 3
        }

        /// <summary>
        /// The type of address.
        /// </summary>
        /// <value>The type of address.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentAddressData" /> class.
        /// </summary>
        /// <param name="Type">The type of address..</param>
        /// <param name="TypeLabel">If type is &#39;Other&#39;, optionally specify the address type..</param>
        /// <param name="Line1">First line of the address..</param>
        /// <param name="Line2">Second line of the address..</param>
        /// <param name="City">City of the address.</param>
        /// <param name="State">State or province of the address..</param>
        /// <param name="Country">Country of the address..</param>
        /// <param name="PostalCode">Postal code of the address..</param>
        /// <param name="Coordinates">Geolocation coordinates for the address.</param>
        /// <param name="CrossStreets">List of streets that intersect this address.</param>
        /// <param name="Notes">Delivery notes for the address (e.g. Use entrance on east side)..</param>
        /// <param name="BusinessInfo">Additional business data if this is a business address..</param>
        public FulfillmentAddressData(TypeEnum? Type = default(TypeEnum?), string TypeLabel = default(string), string Line1 = default(string), string Line2 = default(string), string City = default(string), string State = default(string), string Country = default(string), string PostalCode = default(string), GeolocationCoordinatesData Coordinates = default(GeolocationCoordinatesData), List<CrossStreetData> CrossStreets = default(List<CrossStreetData>), string Notes = default(string), FulfillmentAddressBusinessData BusinessInfo = default(FulfillmentAddressBusinessData))
        {
            this.Type = Type;
            this.TypeLabel = TypeLabel;
            this.Line1 = Line1;
            this.Line2 = Line2;
            this.City = City;
            this.State = State;
            this.Country = Country;
            this.PostalCode = PostalCode;
            this.Coordinates = Coordinates;
            this.CrossStreets = CrossStreets;
            this.Notes = Notes;
            this.BusinessInfo = BusinessInfo;
        }
        

        /// <summary>
        /// If type is &#39;Other&#39;, optionally specify the address type.
        /// </summary>
        /// <value>If type is &#39;Other&#39;, optionally specify the address type.</value>
        [DataMember(Name="typeLabel", EmitDefaultValue=false)]
        public string TypeLabel { get; set; }

        /// <summary>
        /// First line of the address.
        /// </summary>
        /// <value>First line of the address.</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }

        /// <summary>
        /// Second line of the address.
        /// </summary>
        /// <value>Second line of the address.</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }

        /// <summary>
        /// City of the address
        /// </summary>
        /// <value>City of the address</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// State or province of the address.
        /// </summary>
        /// <value>State or province of the address.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Country of the address.
        /// </summary>
        /// <value>Country of the address.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Postal code of the address.
        /// </summary>
        /// <value>Postal code of the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Geolocation coordinates for the address
        /// </summary>
        /// <value>Geolocation coordinates for the address</value>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public GeolocationCoordinatesData Coordinates { get; set; }

        /// <summary>
        /// List of streets that intersect this address
        /// </summary>
        /// <value>List of streets that intersect this address</value>
        [DataMember(Name="crossStreets", EmitDefaultValue=false)]
        public List<CrossStreetData> CrossStreets { get; set; }

        /// <summary>
        /// Delivery notes for the address (e.g. Use entrance on east side).
        /// </summary>
        /// <value>Delivery notes for the address (e.g. Use entrance on east side).</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Additional business data if this is a business address.
        /// </summary>
        /// <value>Additional business data if this is a business address.</value>
        [DataMember(Name="businessInfo", EmitDefaultValue=false)]
        public FulfillmentAddressBusinessData BusinessInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillmentAddressData {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeLabel: ").Append(TypeLabel).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  CrossStreets: ").Append(CrossStreets).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  BusinessInfo: ").Append(BusinessInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentAddressData);
        }

        /// <summary>
        /// Returns true if FulfillmentAddressData instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentAddressData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentAddressData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeLabel == input.TypeLabel ||
                    (this.TypeLabel != null &&
                    this.TypeLabel.Equals(input.TypeLabel))
                ) && 
                (
                    this.Line1 == input.Line1 ||
                    (this.Line1 != null &&
                    this.Line1.Equals(input.Line1))
                ) && 
                (
                    this.Line2 == input.Line2 ||
                    (this.Line2 != null &&
                    this.Line2.Equals(input.Line2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    (this.Coordinates != null &&
                    this.Coordinates.Equals(input.Coordinates))
                ) && 
                (
                    this.CrossStreets == input.CrossStreets ||
                    this.CrossStreets != null &&
                    this.CrossStreets.SequenceEqual(input.CrossStreets)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.BusinessInfo == input.BusinessInfo ||
                    (this.BusinessInfo != null &&
                    this.BusinessInfo.Equals(input.BusinessInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeLabel != null)
                    hashCode = hashCode * 59 + this.TypeLabel.GetHashCode();
                if (this.Line1 != null)
                    hashCode = hashCode * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hashCode = hashCode * 59 + this.Line2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                if (this.CrossStreets != null)
                    hashCode = hashCode * 59 + this.CrossStreets.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.BusinessInfo != null)
                    hashCode = hashCode * 59 + this.BusinessInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Country (string) maxLength
            if(this.Country != null && this.Country.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 128.", new [] { "Country" });
            }

            // Country (string) minLength
            if(this.Country != null && this.Country.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be greater than 0.", new [] { "Country" });
            }

            // Country (string) pattern
            Regex regexCountry = new Regex(@"\\p{Alpha}[\\p{Alpha}'-\\., ]*", RegexOptions.CultureInvariant);
            if (false == regexCountry.Match(this.Country).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
            }

            yield break;
        }
    }

}
