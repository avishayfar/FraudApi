/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// Provides authentication configuration for subscription endpoints.
    /// </summary>
    [DataContract]
    public partial class AuthenticationData :  IEquatable<AuthenticationData>, IValidatableObject
    {
        /// <summary>
        /// The type of authentication scheme to use in outbound message delivery requests
        /// </summary>
        /// <value>The type of authentication scheme to use in outbound message delivery requests</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            
            /// <summary>
            /// Enum BASIC for value: BASIC
            /// </summary>
            [EnumMember(Value = "BASIC")]
            BASIC = 1
        }

        /// <summary>
        /// The type of authentication scheme to use in outbound message delivery requests
        /// </summary>
        /// <value>The type of authentication scheme to use in outbound message delivery requests</value>
        [DataMember(Name="authenticationType", EmitDefaultValue=false)]
        public AuthenticationTypeEnum AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthenticationData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationData" /> class.
        /// </summary>
        /// <param name="AuthenticationType">The type of authentication scheme to use in outbound message delivery requests (required).</param>
        /// <param name="Credentials">Credentials used for authentication. (required).</param>
        public AuthenticationData(AuthenticationTypeEnum AuthenticationType = default(AuthenticationTypeEnum), string Credentials = default(string))
        {
            // to ensure "AuthenticationType" is required (not null)
            if (AuthenticationType == null)
            {
                throw new InvalidDataException("AuthenticationType is a required property for AuthenticationData and cannot be null");
            }
            else
            {
                this.AuthenticationType = AuthenticationType;
            }
            // to ensure "Credentials" is required (not null)
            if (Credentials == null)
            {
                throw new InvalidDataException("Credentials is a required property for AuthenticationData and cannot be null");
            }
            else
            {
                this.Credentials = Credentials;
            }
        }
        

        /// <summary>
        /// Credentials used for authentication.
        /// </summary>
        /// <value>Credentials used for authentication.</value>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public string Credentials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationData {\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthenticationData);
        }

        /// <summary>
        /// Returns true if AuthenticationData instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthenticationData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Credentials (string) maxLength
            if(this.Credentials != null && this.Credentials.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Credentials, length must be less than 500.", new [] { "Credentials" });
            }

            // Credentials (string) minLength
            if(this.Credentials != null && this.Credentials.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Credentials, length must be greater than 1.", new [] { "Credentials" });
            }

            yield break;
        }
    }

}
