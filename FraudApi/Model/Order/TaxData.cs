/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// TaxData
    /// </summary>
    [DataContract]
    public partial class TaxData :  IEquatable<TaxData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxData" /> class.
        /// </summary>
        /// <param name="Amount">The tax amount.</param>
        /// <param name="Code">The tax code.</param>
        /// <param name="Description">The tax description.</param>
        /// <param name="IsIncluded">Indicates if the tax is included in the item price. Note: the name is for backward compatibility with the v1.1 OrderService API.</param>
        /// <param name="Percentage">Tax percentage for presentation purposes. May be null.</param>
        /// <param name="Source">The source of the tax.</param>
        /// <param name="Active">Determines if this tax is in effect.</param>
        /// <param name="LineId">LineId.</param>
        public TaxData(decimal? Amount = default(decimal?), string Code = default(string), string Description = default(string), bool? IsIncluded = default(bool?), decimal? Percentage = default(decimal?), string Source = default(string), bool? Active = default(bool?), string LineId = default(string))
        {
            this.Amount = Amount;
            this.Code = Code;
            this.Description = Description;
            this.IsIncluded = IsIncluded;
            this.Percentage = Percentage;
            this.Source = Source;
            this.Active = Active;
            this.LineId = LineId;
        }
        
        /// <summary>
        /// The tax amount
        /// </summary>
        /// <value>The tax amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The tax code
        /// </summary>
        /// <value>The tax code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The tax description
        /// </summary>
        /// <value>The tax description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates if the tax is included in the item price. Note: the name is for backward compatibility with the v1.1 OrderService API
        /// </summary>
        /// <value>Indicates if the tax is included in the item price. Note: the name is for backward compatibility with the v1.1 OrderService API</value>
        [DataMember(Name="isIncluded", EmitDefaultValue=false)]
        public bool? IsIncluded { get; set; }

        /// <summary>
        /// Tax percentage for presentation purposes. May be null
        /// </summary>
        /// <value>Tax percentage for presentation purposes. May be null</value>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public decimal? Percentage { get; set; }

        /// <summary>
        /// The source of the tax
        /// </summary>
        /// <value>The source of the tax</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Determines if this tax is in effect
        /// </summary>
        /// <value>Determines if this tax is in effect</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxData {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsIncluded: ").Append(IsIncluded).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxData);
        }

        /// <summary>
        /// Returns true if TaxData instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsIncluded == input.IsIncluded ||
                    (this.IsIncluded != null &&
                    this.IsIncluded.Equals(input.IsIncluded))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    (this.Percentage != null &&
                    this.Percentage.Equals(input.Percentage))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IsIncluded != null)
                    hashCode = hashCode * 59 + this.IsIncluded.GetHashCode();
                if (this.Percentage != null)
                    hashCode = hashCode * 59 + this.Percentage.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
