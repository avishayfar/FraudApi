/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// PickupContactData
    /// </summary>
    [DataContract]
    public partial class PickupContactData :  IEquatable<PickupContactData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PickupContactData" /> class.
        /// </summary>
        /// <param name="Name">Name for the pickup contact.</param>
        /// <param name="Company">Company associated with pickup contact.</param>
        /// <param name="ImageLink">Link to an image of the pickup contact.</param>
        /// <param name="Phone">Phone number for the pickup contact.</param>
        /// <param name="HasArrived">Indicates if the pickup contact has arrived at the site.</param>
        /// <param name="Vehicle">Vehicle information of the pickup contact.</param>
        public PickupContactData(string Name = default(string), string Company = default(string), string ImageLink = default(string), string Phone = default(string), bool? HasArrived = default(bool?), VehicleData Vehicle = default(VehicleData))
        {
            this.Name = Name;
            this.Company = Company;
            this.ImageLink = ImageLink;
            this.Phone = Phone;
            this.HasArrived = HasArrived;
            this.Vehicle = Vehicle;
        }
        
        /// <summary>
        /// Name for the pickup contact
        /// </summary>
        /// <value>Name for the pickup contact</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Company associated with pickup contact
        /// </summary>
        /// <value>Company associated with pickup contact</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Link to an image of the pickup contact
        /// </summary>
        /// <value>Link to an image of the pickup contact</value>
        [DataMember(Name="imageLink", EmitDefaultValue=false)]
        public string ImageLink { get; set; }

        /// <summary>
        /// Phone number for the pickup contact
        /// </summary>
        /// <value>Phone number for the pickup contact</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Indicates if the pickup contact has arrived at the site
        /// </summary>
        /// <value>Indicates if the pickup contact has arrived at the site</value>
        [DataMember(Name="hasArrived", EmitDefaultValue=false)]
        public bool? HasArrived { get; set; }

        /// <summary>
        /// Vehicle information of the pickup contact
        /// </summary>
        /// <value>Vehicle information of the pickup contact</value>
        [DataMember(Name="vehicle", EmitDefaultValue=false)]
        public VehicleData Vehicle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PickupContactData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  ImageLink: ").Append(ImageLink).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  HasArrived: ").Append(HasArrived).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PickupContactData);
        }

        /// <summary>
        /// Returns true if PickupContactData instances are equal
        /// </summary>
        /// <param name="input">Instance of PickupContactData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PickupContactData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.ImageLink == input.ImageLink ||
                    (this.ImageLink != null &&
                    this.ImageLink.Equals(input.ImageLink))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.HasArrived == input.HasArrived ||
                    (this.HasArrived != null &&
                    this.HasArrived.Equals(input.HasArrived))
                ) && 
                (
                    this.Vehicle == input.Vehicle ||
                    (this.Vehicle != null &&
                    this.Vehicle.Equals(input.Vehicle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.ImageLink != null)
                    hashCode = hashCode * 59 + this.ImageLink.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.HasArrived != null)
                    hashCode = hashCode * 59 + this.HasArrived.GetHashCode();
                if (this.Vehicle != null)
                    hashCode = hashCode * 59 + this.Vehicle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
