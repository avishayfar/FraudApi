/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// Defines configuration for a URL subscription&#39;s delivery endpoint
    /// </summary>
    [DataContract]
    public partial class UrlEndpointData :  IEquatable<UrlEndpointData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlEndpointData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UrlEndpointData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlEndpointData" /> class.
        /// </summary>
        /// <param name="Name">The name of endpoint. (required).</param>
        /// <param name="Description">A description of the endpoint. (required).</param>
        /// <param name="DestinationUrl">An absolute HTTP URL where messages will be sent to. (required).</param>
        public UrlEndpointData(string Name = default(string), string Description = default(string), string DestinationUrl = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for UrlEndpointData and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for UrlEndpointData and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "DestinationUrl" is required (not null)
            if (DestinationUrl == null)
            {
                throw new InvalidDataException("DestinationUrl is a required property for UrlEndpointData and cannot be null");
            }
            else
            {
                this.DestinationUrl = DestinationUrl;
            }
        }
        
        /// <summary>
        /// The name of endpoint.
        /// </summary>
        /// <value>The name of endpoint.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the endpoint.
        /// </summary>
        /// <value>A description of the endpoint.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An absolute HTTP URL where messages will be sent to.
        /// </summary>
        /// <value>An absolute HTTP URL where messages will be sent to.</value>
        [DataMember(Name="destinationUrl", EmitDefaultValue=false)]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UrlEndpointData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DestinationUrl: ").Append(DestinationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlEndpointData);
        }

        /// <summary>
        /// Returns true if UrlEndpointData instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlEndpointData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlEndpointData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DestinationUrl == input.DestinationUrl ||
                    (this.DestinationUrl != null &&
                    this.DestinationUrl.Equals(input.DestinationUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DestinationUrl != null)
                    hashCode = hashCode * 59 + this.DestinationUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"\\p{Alpha}[\\w-]*", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            yield break;
        }
    }

}
