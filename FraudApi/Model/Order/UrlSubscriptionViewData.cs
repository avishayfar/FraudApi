/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// Contains general viewing information for a URL subscription
    /// </summary>
    [DataContract]
    public partial class UrlSubscriptionViewData :  IEquatable<UrlSubscriptionViewData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlSubscriptionViewData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UrlSubscriptionViewData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlSubscriptionViewData" /> class.
        /// </summary>
        /// <param name="Name">The name of the subscription (required).</param>
        /// <param name="Description">A description of the subscription (required).</param>
        /// <param name="TopicId">The topic to subscribe to messages from (required).</param>
        /// <param name="MessageAttributePatterns">The message attribute patterns to use when selecting messages published on a topic. If patterns are specified, the subscription will receive only those messages that are published with attributes that match the subscription&#39;s patterns. Each attribute pattern specified must be matched against the message&#39;s attribute values for the message to be delivered to the subscriber. Each message attribute pattern value must be a valid regular expression pattern.</param>
        /// <param name="PayloadDelivered">Indicates whether message payloads should be propagated to the subscribed endpoint. If false, the endpoint will be invoked without any payload data..</param>
        /// <param name="EnterpriseUnitId">The ID of the enterprise unit that will be used to filter messages.</param>
        /// <param name="Endpoint">The destination endpoint for the subscription (required).</param>
        public UrlSubscriptionViewData(string Name = default(string), string Description = default(string), TopicIdData TopicId = default(TopicIdData), List<KeyValueData> MessageAttributePatterns = default(List<KeyValueData>), bool? PayloadDelivered = default(bool?), string EnterpriseUnitId = default(string), UrlEndpointData Endpoint = default(UrlEndpointData))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for UrlSubscriptionViewData and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for UrlSubscriptionViewData and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "TopicId" is required (not null)
            if (TopicId == null)
            {
                throw new InvalidDataException("TopicId is a required property for UrlSubscriptionViewData and cannot be null");
            }
            else
            {
                this.TopicId = TopicId;
            }
            // to ensure "Endpoint" is required (not null)
            if (Endpoint == null)
            {
                throw new InvalidDataException("Endpoint is a required property for UrlSubscriptionViewData and cannot be null");
            }
            else
            {
                this.Endpoint = Endpoint;
            }
            this.MessageAttributePatterns = MessageAttributePatterns;
            this.PayloadDelivered = PayloadDelivered;
            this.EnterpriseUnitId = EnterpriseUnitId;
        }
        
        /// <summary>
        /// The name of the subscription
        /// </summary>
        /// <value>The name of the subscription</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the subscription
        /// </summary>
        /// <value>A description of the subscription</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The topic to subscribe to messages from
        /// </summary>
        /// <value>The topic to subscribe to messages from</value>
        [DataMember(Name="topicId", EmitDefaultValue=false)]
        public TopicIdData TopicId { get; set; }

        /// <summary>
        /// The message attribute patterns to use when selecting messages published on a topic. If patterns are specified, the subscription will receive only those messages that are published with attributes that match the subscription&#39;s patterns. Each attribute pattern specified must be matched against the message&#39;s attribute values for the message to be delivered to the subscriber. Each message attribute pattern value must be a valid regular expression pattern
        /// </summary>
        /// <value>The message attribute patterns to use when selecting messages published on a topic. If patterns are specified, the subscription will receive only those messages that are published with attributes that match the subscription&#39;s patterns. Each attribute pattern specified must be matched against the message&#39;s attribute values for the message to be delivered to the subscriber. Each message attribute pattern value must be a valid regular expression pattern</value>
        [DataMember(Name="messageAttributePatterns", EmitDefaultValue=false)]
        public List<KeyValueData> MessageAttributePatterns { get; set; }

        /// <summary>
        /// Indicates whether message payloads should be propagated to the subscribed endpoint. If false, the endpoint will be invoked without any payload data.
        /// </summary>
        /// <value>Indicates whether message payloads should be propagated to the subscribed endpoint. If false, the endpoint will be invoked without any payload data.</value>
        [DataMember(Name="payloadDelivered", EmitDefaultValue=false)]
        public bool? PayloadDelivered { get; set; }

        /// <summary>
        /// The ID of the enterprise unit that will be used to filter messages
        /// </summary>
        /// <value>The ID of the enterprise unit that will be used to filter messages</value>
        [DataMember(Name="enterpriseUnitId", EmitDefaultValue=false)]
        public string EnterpriseUnitId { get; set; }

        /// <summary>
        /// The destination endpoint for the subscription
        /// </summary>
        /// <value>The destination endpoint for the subscription</value>
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public UrlEndpointData Endpoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UrlSubscriptionViewData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TopicId: ").Append(TopicId).Append("\n");
            sb.Append("  MessageAttributePatterns: ").Append(MessageAttributePatterns).Append("\n");
            sb.Append("  PayloadDelivered: ").Append(PayloadDelivered).Append("\n");
            sb.Append("  EnterpriseUnitId: ").Append(EnterpriseUnitId).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlSubscriptionViewData);
        }

        /// <summary>
        /// Returns true if UrlSubscriptionViewData instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlSubscriptionViewData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlSubscriptionViewData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TopicId == input.TopicId ||
                    (this.TopicId != null &&
                    this.TopicId.Equals(input.TopicId))
                ) && 
                (
                    this.MessageAttributePatterns == input.MessageAttributePatterns ||
                    this.MessageAttributePatterns != null &&
                    this.MessageAttributePatterns.SequenceEqual(input.MessageAttributePatterns)
                ) && 
                (
                    this.PayloadDelivered == input.PayloadDelivered ||
                    (this.PayloadDelivered != null &&
                    this.PayloadDelivered.Equals(input.PayloadDelivered))
                ) && 
                (
                    this.EnterpriseUnitId == input.EnterpriseUnitId ||
                    (this.EnterpriseUnitId != null &&
                    this.EnterpriseUnitId.Equals(input.EnterpriseUnitId))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TopicId != null)
                    hashCode = hashCode * 59 + this.TopicId.GetHashCode();
                if (this.MessageAttributePatterns != null)
                    hashCode = hashCode * 59 + this.MessageAttributePatterns.GetHashCode();
                if (this.PayloadDelivered != null)
                    hashCode = hashCode * 59 + this.PayloadDelivered.GetHashCode();
                if (this.EnterpriseUnitId != null)
                    hashCode = hashCode * 59 + this.EnterpriseUnitId.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"\\p{Alpha}[\\w-]*", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            yield break;
        }
    }

}
