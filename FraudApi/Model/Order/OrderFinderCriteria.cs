/* 
 * order
 *
 * Enables omni-channel persistence and interaction for selling contexts.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace FraudAPI.Model.Order
{
    /// <summary>
    /// Criteria details to search orders. Order will have to match ALL provided fields in order to be in the result.
    /// </summary>
    [DataContract]
    public partial class OrderFinderCriteria :  IEquatable<OrderFinderCriteria>, IValidatableObject
    {
        /// <summary>
        /// The order status
        /// </summary>
        /// <value>The order status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 1,
            
            /// <summary>
            /// Enum Finished for value: Finished
            /// </summary>
            [EnumMember(Value = "Finished")]
            Finished = 2,
            
            /// <summary>
            /// Enum OrderPlaced for value: OrderPlaced
            /// </summary>
            [EnumMember(Value = "OrderPlaced")]
            OrderPlaced = 3,
            
            /// <summary>
            /// Enum ReadyForPickup for value: ReadyForPickup
            /// </summary>
            [EnumMember(Value = "ReadyForPickup")]
            ReadyForPickup = 4,
            
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 5
        }

        /// <summary>
        /// The order status
        /// </summary>
        /// <value>The order status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFinderCriteria" /> class.
        /// </summary>
        /// <param name="CustomerId">The Id of the Customer associated with the order.</param>
        /// <param name="FromUpdatedDate">Order was last updated on this date, or later.</param>
        /// <param name="PhoneNumber">The Phone of the Customer associated with the order.</param>
        /// <param name="PickupLocationId">The location in which the order was picked.</param>
        /// <param name="ReferenceId">The order reference id.</param>
        /// <param name="Status">The order status.</param>
        /// <param name="ToUpdatedDate">Order was last updated on this date, or earlier.</param>
        /// <param name="Sort">The sort order for the paged find response.</param>
        /// <param name="ReturnFullOrders">Boolean value to specify the content of the orders returned..</param>
        public OrderFinderCriteria(string CustomerId = default(string), DateTime? FromUpdatedDate = default(DateTime?), string PhoneNumber = default(string), string PickupLocationId = default(string), string ReferenceId = default(string), StatusEnum? Status = default(StatusEnum?), DateTime? ToUpdatedDate = default(DateTime?), OrderCriteriaSort Sort = default(OrderCriteriaSort), bool? ReturnFullOrders = default(bool?))
        {
            this.CustomerId = CustomerId;
            this.FromUpdatedDate = FromUpdatedDate;
            this.PhoneNumber = PhoneNumber;
            this.PickupLocationId = PickupLocationId;
            this.ReferenceId = ReferenceId;
            this.Status = Status;
            this.ToUpdatedDate = ToUpdatedDate;
            this.Sort = Sort;
            this.ReturnFullOrders = ReturnFullOrders;
        }
        
        /// <summary>
        /// The Id of the Customer associated with the order
        /// </summary>
        /// <value>The Id of the Customer associated with the order</value>
        [DataMember(Name="customerId", EmitDefaultValue=false)]
        public string CustomerId { get; set; }

        /// <summary>
        /// Order was last updated on this date, or later
        /// </summary>
        /// <value>Order was last updated on this date, or later</value>
        [DataMember(Name="fromUpdatedDate", EmitDefaultValue=false)]
        public DateTime? FromUpdatedDate { get; set; }

        /// <summary>
        /// The Phone of the Customer associated with the order
        /// </summary>
        /// <value>The Phone of the Customer associated with the order</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The location in which the order was picked
        /// </summary>
        /// <value>The location in which the order was picked</value>
        [DataMember(Name="pickupLocationId", EmitDefaultValue=false)]
        public string PickupLocationId { get; set; }

        /// <summary>
        /// The order reference id
        /// </summary>
        /// <value>The order reference id</value>
        [DataMember(Name="referenceId", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }


        /// <summary>
        /// Order was last updated on this date, or earlier
        /// </summary>
        /// <value>Order was last updated on this date, or earlier</value>
        [DataMember(Name="toUpdatedDate", EmitDefaultValue=false)]
        public DateTime? ToUpdatedDate { get; set; }

        /// <summary>
        /// The sort order for the paged find response
        /// </summary>
        /// <value>The sort order for the paged find response</value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public OrderCriteriaSort Sort { get; set; }

        /// <summary>
        /// Boolean value to specify the content of the orders returned.
        /// </summary>
        /// <value>Boolean value to specify the content of the orders returned.</value>
        [DataMember(Name="returnFullOrders", EmitDefaultValue=false)]
        public bool? ReturnFullOrders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderFinderCriteria {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  FromUpdatedDate: ").Append(FromUpdatedDate).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PickupLocationId: ").Append(PickupLocationId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ToUpdatedDate: ").Append(ToUpdatedDate).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  ReturnFullOrders: ").Append(ReturnFullOrders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderFinderCriteria);
        }

        /// <summary>
        /// Returns true if OrderFinderCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderFinderCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFinderCriteria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.FromUpdatedDate == input.FromUpdatedDate ||
                    (this.FromUpdatedDate != null &&
                    this.FromUpdatedDate.Equals(input.FromUpdatedDate))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.PickupLocationId == input.PickupLocationId ||
                    (this.PickupLocationId != null &&
                    this.PickupLocationId.Equals(input.PickupLocationId))
                ) && 
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ToUpdatedDate == input.ToUpdatedDate ||
                    (this.ToUpdatedDate != null &&
                    this.ToUpdatedDate.Equals(input.ToUpdatedDate))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.ReturnFullOrders == input.ReturnFullOrders ||
                    (this.ReturnFullOrders != null &&
                    this.ReturnFullOrders.Equals(input.ReturnFullOrders))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                    hashCode = hashCode * 59 + this.CustomerId.GetHashCode();
                if (this.FromUpdatedDate != null)
                    hashCode = hashCode * 59 + this.FromUpdatedDate.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.PickupLocationId != null)
                    hashCode = hashCode * 59 + this.PickupLocationId.GetHashCode();
                if (this.ReferenceId != null)
                    hashCode = hashCode * 59 + this.ReferenceId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ToUpdatedDate != null)
                    hashCode = hashCode * 59 + this.ToUpdatedDate.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.ReturnFullOrders != null)
                    hashCode = hashCode * 59 + this.ReturnFullOrders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
